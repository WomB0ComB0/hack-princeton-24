/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardTransactionsImport } from './routes/dashboard/transactions'
import { Route as DashboardStocksImport } from './routes/dashboard/stocks'
import { Route as DashboardPlannerImport } from './routes/dashboard/planner'
import { Route as DashboardCryptoImport } from './routes/dashboard/crypto'
import { Route as DashboardAccountsImport } from './routes/dashboard/accounts'
import { Route as DashboardLayoutImport } from './routes/dashboard/_layout'

// Create Virtual Routes

const DashboardImport = createFileRoute('/dashboard')()

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardTransactionsRoute = DashboardTransactionsImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardStocksRoute = DashboardStocksImport.update({
  id: '/stocks',
  path: '/stocks',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardPlannerRoute = DashboardPlannerImport.update({
  id: '/planner',
  path: '/planner',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardCryptoRoute = DashboardCryptoImport.update({
  id: '/crypto',
  path: '/crypto',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardAccountsRoute = DashboardAccountsImport.update({
  id: '/accounts',
  path: '/accounts',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardLayoutRoute = DashboardLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => DashboardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/_layout': {
      id: '/dashboard/_layout'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardLayoutImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/accounts': {
      id: '/dashboard/accounts'
      path: '/accounts'
      fullPath: '/dashboard/accounts'
      preLoaderRoute: typeof DashboardAccountsImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/crypto': {
      id: '/dashboard/crypto'
      path: '/crypto'
      fullPath: '/dashboard/crypto'
      preLoaderRoute: typeof DashboardCryptoImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/planner': {
      id: '/dashboard/planner'
      path: '/planner'
      fullPath: '/dashboard/planner'
      preLoaderRoute: typeof DashboardPlannerImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/stocks': {
      id: '/dashboard/stocks'
      path: '/stocks'
      fullPath: '/dashboard/stocks'
      preLoaderRoute: typeof DashboardStocksImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/transactions': {
      id: '/dashboard/transactions'
      path: '/transactions'
      fullPath: '/dashboard/transactions'
      preLoaderRoute: typeof DashboardTransactionsImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardLayoutRoute: typeof DashboardLayoutRoute
  DashboardAccountsRoute: typeof DashboardAccountsRoute
  DashboardCryptoRoute: typeof DashboardCryptoRoute
  DashboardPlannerRoute: typeof DashboardPlannerRoute
  DashboardStocksRoute: typeof DashboardStocksRoute
  DashboardTransactionsRoute: typeof DashboardTransactionsRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardLayoutRoute: DashboardLayoutRoute,
  DashboardAccountsRoute: DashboardAccountsRoute,
  DashboardCryptoRoute: DashboardCryptoRoute,
  DashboardPlannerRoute: DashboardPlannerRoute,
  DashboardStocksRoute: DashboardStocksRoute,
  DashboardTransactionsRoute: DashboardTransactionsRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardLayoutRoute
  '/dashboard/accounts': typeof DashboardAccountsRoute
  '/dashboard/crypto': typeof DashboardCryptoRoute
  '/dashboard/planner': typeof DashboardPlannerRoute
  '/dashboard/stocks': typeof DashboardStocksRoute
  '/dashboard/transactions': typeof DashboardTransactionsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardLayoutRoute
  '/dashboard/accounts': typeof DashboardAccountsRoute
  '/dashboard/crypto': typeof DashboardCryptoRoute
  '/dashboard/planner': typeof DashboardPlannerRoute
  '/dashboard/stocks': typeof DashboardStocksRoute
  '/dashboard/transactions': typeof DashboardTransactionsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/_layout': typeof DashboardLayoutRoute
  '/dashboard/accounts': typeof DashboardAccountsRoute
  '/dashboard/crypto': typeof DashboardCryptoRoute
  '/dashboard/planner': typeof DashboardPlannerRoute
  '/dashboard/stocks': typeof DashboardStocksRoute
  '/dashboard/transactions': typeof DashboardTransactionsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/accounts'
    | '/dashboard/crypto'
    | '/dashboard/planner'
    | '/dashboard/stocks'
    | '/dashboard/transactions'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/dashboard/accounts'
    | '/dashboard/crypto'
    | '/dashboard/planner'
    | '/dashboard/stocks'
    | '/dashboard/transactions'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/_layout'
    | '/dashboard/accounts'
    | '/dashboard/crypto'
    | '/dashboard/planner'
    | '/dashboard/stocks'
    | '/dashboard/transactions'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard",
      "children": [
        "/dashboard/_layout",
        "/dashboard/accounts",
        "/dashboard/crypto",
        "/dashboard/planner",
        "/dashboard/stocks",
        "/dashboard/transactions"
      ]
    },
    "/dashboard/_layout": {
      "filePath": "dashboard/_layout.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/accounts": {
      "filePath": "dashboard/accounts.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/crypto": {
      "filePath": "dashboard/crypto.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/planner": {
      "filePath": "dashboard/planner.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/stocks": {
      "filePath": "dashboard/stocks.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/transactions": {
      "filePath": "dashboard/transactions.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
